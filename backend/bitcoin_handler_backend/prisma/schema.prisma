generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  customer_id                  Int                     @id @default(autoincrement())
  name                         String?                 @db.Char(100)
  transaction_fee              Decimal?                @db.Decimal
  customer_wallet_address_code String
  created_at                   DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?               @default(now()) @db.Timestamptz(6)
  customer_code                String?                 @unique
  Customer_wallet_address      Customer_wallet_address @relation(fields: [customer_wallet_address_code], references: [customer_wallet_address_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_customer_customer_wallet_address")
  Order                        Order[]
}

model Customer_wallet_address {
  customer_wallet_address_id   Int               @id @default(autoincrement())
  address                      String?           @db.Char(100)
  created_at                   DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?         @default(now()) @db.Timestamptz(6)
  wallet_address_status_code   String?
  customer_wallet_address_code String?           @unique
  Customer                     Customer[]
  Payment_attempt              Payment_attempt[]
}

model Order {
  order_id          Int               @id @default(autoincrement())
  order_status_code String
  customer_code     String
  external_ref      String?
  created_at        DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?         @default(now()) @db.Timestamptz(6)
  order_code        String?           @unique
  Customer          Customer          @relation(fields: [customer_code], references: [customer_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_customer")
  Order_status      Order_status      @relation(fields: [order_status_code], references: [order_tatus_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_order_order_status")
  Payment_attempt   Payment_attempt[]
  Payment_request   Payment_request[]
}

model Order_status {
  order_status_id  Int       @id @default(autoincrement())
  status           String?   @db.Char(50)
  description      String?   @db.Char(100)
  created_at       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at       DateTime? @default(now()) @db.Timestamptz(6)
  order_tatus_code String?   @unique
  Order            Order[]
}

model Payment_attempt {
  payment_attempt_id           Int                      @id @default(autoincrement())
  payment_status_code          String?
  payment_method_code          String?
  order_code                   String?
  network_fee                  Decimal?                 @db.Decimal
  layer_1_address              String?
  invoice_address              String?
  amount_sats                  Decimal?                 @db.Decimal
  metadata                     String?
  blocks_confirmed             Int?
  customer_wallet_address_code String?
  payment_preference_code      String?
  created_at                   DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                   DateTime?                @default(now()) @db.Timestamptz(6)
  confirmed_at                 DateTime?                @default(now()) @db.Timestamptz(6)
  payment_attempt_code         String?                  @unique
  Customer_wallet_address      Customer_wallet_address? @relation(fields: [customer_wallet_address_code], references: [customer_wallet_address_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_attempt_customer_wallet")
  Order                        Order?                   @relation(fields: [order_code], references: [order_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_attempt_order")
  Payment_method               Payment_method?          @relation(fields: [payment_method_code], references: [payment_method_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_attempt_payment_method")
  Payment_preference           Payment_preference?      @relation(fields: [payment_preference_code], references: [payment_preference_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_attempt_payment_preference")
  Payment_status               Payment_status?          @relation(fields: [payment_status_code], references: [payment_status_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_attempt_payment_status")
  Payment_request              Payment_request[]
}

model Payment_method {
  payment_method_id   Int               @id @default(autoincrement())
  name                String?           @db.Char(100)
  created_at          DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?         @default(now()) @db.Timestamptz(6)
  payment_method_code String?           @unique
  Payment_attempt     Payment_attempt[]
}

model Payment_preference {
  payment_preference_id   Int               @id @default(autoincrement())
  invoice_life_time       Int
  invoice_max_attempt     Int
  created_at              DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at              DateTime?         @default(now()) @db.Timestamptz(6)
  payment_preference_code String?           @unique
  Payment_attempt         Payment_attempt[]
}

model Payment_request {
  payment_request_id     Int              @id @default(autoincrement())
  order_code             String
  payment_status_code    String
  succeeded_payment_code String?
  amount_fiat            Decimal?         @db.Decimal
  local_currency_code    String?
  created_at             DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?        @default(now()) @db.Timestamptz(6)
  payment_request_code   String?          @unique
  Currencies             Currencies?      @relation(fields: [local_currency_code], references: [currency_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_request_currency")
  Order                  Order            @relation(fields: [order_code], references: [order_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_request_order")
  Payment_status         Payment_status   @relation(fields: [payment_status_code], references: [payment_status_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_request_payment_status")
  Payment_attempt        Payment_attempt? @relation(fields: [succeeded_payment_code], references: [payment_attempt_code], onDelete: Cascade, onUpdate: NoAction, map: "fk_payment_request_succeeded_attempt")
}

model Payment_status {
  payment_status_id   Int               @id @default(autoincrement())
  status              String?           @db.Char(50)
  description         String?
  created_at          DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at          DateTime?         @default(now()) @db.Timestamptz(6)
  payment_status_code String?           @unique
  Payment_attempt     Payment_attempt[]
  Payment_request     Payment_request[]
}

model Wallet_address_status {
  wallet_address_status_id   Int       @id @default(autoincrement())
  status                     String?   @db.VarChar(50)
  description                String?   @db.VarChar(100)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
  wallet_address_status_code String?   @unique
}

model Currencies {
  currency_id     Int               @id(map: "Currency_pkey") @default(autoincrement())
  name            String            @db.VarChar(100)
  country         String?           @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  code            String            @unique(map: "Currency_code_key") @db.Char(3)
  symbol          String?           @db.VarChar(10)
  currency_code   String?           @unique
  Payment_request Payment_request[]
}
